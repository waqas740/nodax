const helpers = require('./index');
const pluralize = require('pluralize');
const fs = require('fs');
const path = require("path")

String.prototype.toFLUpperCase = function () {
  return this.charAt(0).toUpperCase() + this.slice(1)
}
module.exports = {

  generateFileContent(args, type, view = false) {
    if (type == "controllers") {
      return this.generateControllerFile(args, view)
    }
    else if (type == "routes") {
      return this.generateRouteFile(args)
    }

  },

  generateFile(args, type, view = false) {

    this.checkFileExistence(args, type)
    const targetPath = helpers.path.getTargetPath(type, args.name);
    helpers.asset.write(targetPath, this.generateFileContent(args, type, view));
    helpers.view.log(
      `New ${pluralize.singular(args.name).toLowerCase()}.${pluralize.singular(type)} was created at ${targetPath}`
    );
  },
  generateControllerFile(args, view = false) {
    let modelPath = path.relative(process.cwd(), helpers.path.getPath("model"));
    modelPath = modelPath.replace(path.resolve(), '')
    let controllerPath = helpers.path.getPath("controllers")
    modelPath = helpers.path.backSlashes(path.relative(controllerPath, modelPath))
    return helpers.template.render("controller.js", {
      name: pluralize.singular(args.name).toFLUpperCase(),
      modelPath: modelPath,
      view

    });
  },
  generateViewFile(args) {
    /**
     * Create folder
     */
    let viewPath = helpers.path.join(helpers.path.getPath("view"), pluralize.plural(args.name).toLowerCase())
    helpers.asset.mkdirp(viewPath);
    /**
     * Create list file
     */
    const l1Content = helpers.asset.read("templates/views/list/l1-template.ejs")
    const l2Content = helpers.template.loadTemplate("templates/views/list/l2-template.ejs", {
      moduleName: pluralize.plural(args.name).toFLUpperCase(),
      cols: []
    });
    const l3Content = helpers.asset.read("templates/views/list/l3-template.ejs")
    helpers.asset.write(helpers.path.join(viewPath, pluralize.singular(args.name).toLowerCase() + "_list.ejs"),
      helpers.template.beautifyContent(l1Content + "\n" + l2Content + "\n" + l3Content))
    /**
     * Create file
     */
    const models = require(helpers.path.getPath("model"))
    const model = models[args.name] || models[pluralize.plural(args.name.toFLUpperCase())]
    const attributes = model.tableAttributes;
    let cols = {}
    Object.keys(attributes).forEach(attribute => {
      if (!attributes[attribute]._autoGenerated) {
        let colName = attribute.replace(/([a-zA-Z])(?=[A-Z])/g, '$1 ');
        colName = colName.split(" ").map(c => c.toFLUpperCase()).join(" ");
        cols[attribute] = colName

      }
    })
    const c1Content = helpers.asset.read("templates/views/create/c1-template.ejs")
    const c2Content = helpers.template.loadTemplate("templates/views/create/c2-template.ejs", {
      moduleName: pluralize.plural(args.name).toFLUpperCase(),
      cols: cols
    });
    const c3Content = helpers.asset.read("templates/views/create/c3-template.ejs")
    helpers.asset.write(helpers.path.join(viewPath, pluralize.singular(args.name).toLowerCase() + "_create.ejs"),
      helpers.template.beautifyContent(c1Content + "\n" + c2Content + "\n" + c3Content))


  },
  generateRouteFile(args) {
    let controllerPath = helpers.path.getFilePath("controller", args.name);
    controllerPath = controllerPath.replace(path.resolve(), '')
    let routePath = helpers.path.getPath("routes")
    controllerPath = helpers.path.backSlashes(path.relative(routePath, controllerPath))
    return helpers.template.render("route.js", {
      name: pluralize.singular(args.name).toFLUpperCase(),
      controllerPath,
      model: pluralize.plural(args.name).toLowerCase()

    });
  },
  checkFileExistence(args, type) {
    const force = !!args.force;
    const newFileName = `${pluralize.singular(args.name).toLowerCase()}-${pluralize.singular(type)}.js`
    const filePath = helpers.path.getTargetPath(type, args.name);
    if (!force && fs.existsSync(filePath) === true) {
      helpers.view.notifyAboutExistingFile(newFileName);
    }
    if (force && fs.existsSync(filePath) === true) {
      helpers.view.log(`Deleting the ${newFileName} file.(--force)`);
      try {
        fs.unlinkSync(filePath);
      } catch (e) {
        helpers.view.error(e);
      }

    }

  }


};
